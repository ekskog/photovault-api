apiVersion: apps/v1
kind: Deployment
metadata:
  name: jpg2avif-py
  namespace: webapps
  labels:
    app: jpg2avif-py
spec:
  replicas: 2  # Start with 2 replicas for load balancing
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: jpg2avif-py
  template:
    metadata:
      labels:
        app: jpg2avif-py
    spec:
      containers:
      - name: jpg2avif-py
        image: ghcr.io/ekskog/jpeg2avif-py:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
        envFrom:
        - configMapRef:
            name: jpg2avif-py-config
        env:
        - name: PORT
          value: "3000"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"  # Base memory for Python + FastAPI
            cpu: "200m"      # Base CPU for image processing
          limits:
            memory: "1Gi"    # Allow up to 1GB for image processing
            cpu: "1000m"     # Allow up to 1 CPU core for conversion
        # Security context for better security
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Need write access for temp files
          capabilities:
            drop:
            - ALL
        # Temporary storage for conversion process
        volumeMounts:
        - name: temp-storage
          mountPath: /tmp
      volumes:
      - name: temp-storage
        emptyDir:
          sizeLimit: 2Gi  # Allow up to 2GB for temporary files
---
apiVersion: v1
kind: Service
metadata:
  name: jpg2avif-py-service
  namespace: webapps
  labels:
    app: jpg2avif-py
spec:
  selector:
    app: jpg2avif-py
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  type: ClusterIP  # Internal service only
